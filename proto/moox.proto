syntax = "proto3";

package trpc.moox.server;
option go_package = "github.com/mooyang-code/moox/server/proto";

// 通用错误码
enum EnumMooxErrorCode {
  SUCCESS = 0;
  INVALID_PARAM = 1;
  NO_AUTH = 3;
  INNER_ERR = 17;
  NO_PERMISSION = 6;
  FIELD_INFO_NOT_EXIST = 7;
  RATE_LIMIT_EXCEEDED = 8;  // 频控限制
}

// 认证信息
message AppInfo {
  string app_id = 1;
  string app_key = 2;
}

// 返回信息
message RetInfo {
  // 错误码
  EnumMooxErrorCode code = 1;
  // 错误信息
  string msg = 2;
}

// 中间件的响应
message MiddlewareRsp {
  RetInfo ret_info = 1;
}

// 登录类型枚举
enum LoginType {
  // 用户名密码登录
  USERNAME_PASSWORD = 0;
}

// 用户状态
enum UserStatus {
  INACTIVE = 0;    // 未激活
  ACTIVE = 1;      // 正常
  SUSPENDED = 2;   // 暂停
  BANNED = 3;      // 封禁
}

// 用户角色
enum UserRole {
  GUEST = 0;       // 游客
  USER = 1;        // 普通用户
  ADMIN = 2;       // 管理员
  SUPER_ADMIN = 3; // 超级管理员
}

// 用户信息
message UserInfo {
  string user_id = 1;           // 用户ID
  string username = 2;          // 用户名
  string nickname = 3;          // 昵称
  string email = 4;             // 邮箱
  string phone = 5;             // 手机号
  string avatar = 6;            // 头像URL
  UserStatus status = 7;        // 用户状态
  UserRole role = 8;            // 用户角色
  int64 created_at = 9;         // 创建时间戳
  int64 last_login_at = 10;     // 最后登录时间
  string last_login_ip = 11;    // 最后登录IP
}

// 用户注册请求
message RegisterReq {
  AppInfo app_info = 1;
  string username = 2;          // 用户名
  string password = 3;          // 明文密码（服务端会进行哈希处理）
  string nickname = 4;          // 昵称（可选）
  string email = 5;             // 邮箱（可选）
}

// 用户注册响应
message RegisterRsp {
  RetInfo ret_info = 1;
  string user_id = 2;           // 新创建的用户ID
  UserInfo user_info = 3;       // 用户信息
}

// 获取登录盐值请求
message GetLoginSaltReq {
  AppInfo app_info = 1;
  string username = 2;          // 用户名/邮箱/手机号
}

// 获取登录盐值响应
message GetLoginSaltRsp {
  RetInfo ret_info = 1;
  string salt = 2;                             // 随机盐值
  int64 timestamp = 3;                         // 服务器时间戳
  int64 expires_in = 4;                        // 盐值过期时间（秒）
}

// 用户名密码登录请求（安全版本）
message LoginReq {
  AppInfo app_info = 1;
  string username = 2;          // 用户名/邮箱/手机号
  string password_hash = 3;     // 密码哈希值
  string salt = 4;              // 从GetLoginSalt获取的盐值
  int64 timestamp = 5;          // 从GetLoginSalt获取的时间戳
  string device_id = 6;         // 设备ID
  string user_agent = 7;        // 用户代理
  string client_ip = 8;         // 客户端IP
}

// 登录成功响应
message LoginRsp {
  RetInfo ret_info = 1;
  string access_token = 2;                     // 访问令牌
  int64 expires_in = 3;                        // 过期时间（秒）
  UserInfo user_info = 4;                      // 用户信息
}

// 获取密码修改盐值请求
message GetChangePasswordSaltReq {
  AppInfo app_info = 1;
  string access_token = 2;      // 访问令牌
}

// 获取密码修改盐值响应
message GetChangePasswordSaltRsp {
  RetInfo ret_info = 1;
  string salt = 2;                             // 随机盐值
  int64 timestamp = 3;                         // 服务器时间戳
  int64 expires_in = 4;                        // 盐值过期时间（秒）
}

// 修改密码请求（安全版本）
message ChangePasswordReq {
  AppInfo app_info = 1;
  string access_token = 2;      // 访问令牌
  string old_password_hash = 3; // 旧密码哈希值：SHA256(old_password + salt + timestamp)
  string new_password_hash = 4; // 新密码哈希值：SHA256(new_password + salt + timestamp)
  string salt = 5;              // 从GetChangePasswordSalt获取的盐值
  int64 timestamp = 6;          // 从GetChangePasswordSalt获取的时间戳
}

// 修改密码响应
message ChangePasswordRsp {
  RetInfo ret_info = 1;
}

// 获取用户信息请求
message GetUserInfoReq {
  AppInfo app_info = 1;
  string access_token = 2;      // 访问令牌
  string user_id = 3;           // 用户ID
}

// 获取用户信息响应
message GetUserInfoRsp {
  RetInfo ret_info = 1;
  UserInfo user_info = 2;      // 用户信息
}

// 更新用户信息请求
message UpdateUserInfoReq {
  AppInfo app_info = 1;
  string access_token = 2;      // 访问令牌
  string nick = 3;              // 昵称
  string email = 4;             // 邮箱
  string avatar = 5;            // 头像URL
}

// 更新用户信息响应
message UpdateUserInfoRsp {
  RetInfo ret_info = 1;
  UserInfo user_info = 2;      // 更新后的用户信息
}

// 用户认证和管理服务
service AuthAPI {
  // ================================================================================
  // 用户注册接口
  
  // Register 用户注册
  rpc Register(RegisterReq) returns (RegisterRsp);
  
  // ================================================================================
  // 用户登录接口
  
  // GetLoginSalt 获取登录盐值（第一步）
  rpc GetLoginSalt(GetLoginSaltReq) returns (GetLoginSaltRsp);
  // Login 用户名密码登录（第二步）
  rpc Login(LoginReq) returns (LoginRsp);
  
  // ================================================================================
  // 密码管理接口
  
  // GetChangePasswordSalt 获取密码修改盐值（第一步）
  rpc GetChangePasswordSalt(GetChangePasswordSaltReq) returns (GetChangePasswordSaltRsp);
  // ChangePassword 修改密码（第二步）
  rpc ChangePassword(ChangePasswordReq) returns (ChangePasswordRsp);
  
  // ================================================================================
  // 用户信息管理接口
  
  // GetUserInfo 获取用户信息
  rpc GetUserInfo(GetUserInfoReq) returns (GetUserInfoRsp);
  // UpdateUserInfo 更新用户信息
  rpc UpdateUserInfo(UpdateUserInfoReq) returns (UpdateUserInfoRsp);
}

// ================================================================================
// 云节点心跳相关消息定义

// 运行中任务信息
message RunningTaskInfo {
  string task_id = 1;           // 任务ID
  string collector_type = 2;    // 采集器类型
  string source = 3;            // 数据源
  int64 start_time = 4;         // 开始时间戳
  int64 last_exec_time = 5;     // 最后执行时间戳
  int64 exec_count = 6;         // 执行次数
  int64 error_count = 7;        // 错误次数
}

// 心跳上报请求
message HeartbeatReq {
  AppInfo app_info = 1;
  string node_id = 2;                          // 节点ID
  int64 timestamp = 3;                         // 时间戳
  string status = 4;                           // 节点状态: running/idle
  repeated RunningTaskInfo running_tasks = 5;  // 运行中的任务列表
}

// 心跳上报响应
message HeartbeatRsp {
  RetInfo ret_info = 1;
  bool success = 2;                            // 是否成功
  int64 timestamp = 3;                         // 服务器时间戳
}

// 获取节点状态请求
message GetNodeStatusReq {
  AppInfo app_info = 1;
  string access_token = 2;                     // 访问令牌
  repeated string node_ids = 3;                // 节点ID列表（为空则获取所有）
}

// 节点状态信息
message NodeStatusInfo {
  string node_id = 1;                          // 节点ID
  int32 status = 2;                            // 状态: 1=在线, 0=离线
  int64 last_heartbeat = 3;                    // 最后心跳时间戳
  int32 running_task_count = 4;                // 运行中任务数量
  repeated RunningTaskInfo running_tasks = 5;  // 运行中的任务列表
}

// 获取节点状态响应
message GetNodeStatusRsp {
  RetInfo ret_info = 1;
  repeated NodeStatusInfo nodes = 2;           // 节点状态列表
}

// 云节点服务
service CloudNodeAPI {
  // ================================================================================
  // 心跳管理接口
  
  // Heartbeat 节点心跳上报
  rpc Heartbeat(HeartbeatReq) returns (HeartbeatRsp);
  
  // GetNodeStatus 获取节点状态
  rpc GetNodeStatus(GetNodeStatusReq) returns (GetNodeStatusRsp);
}

// 管理台相关接口
service AdminAPI {
}
