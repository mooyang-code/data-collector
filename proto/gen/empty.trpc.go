// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: empty.proto

package proto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// CollectorService defines service.
type CollectorService interface {
	Empty(ctx context.Context, req *EmptyReq) (*EmptyRsp, error)
}

func CollectorService_Empty_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &EmptyReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CollectorService).Empty(ctx, reqbody.(*EmptyReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CollectorServer_ServiceDesc descriptor for server.RegisterService.
var CollectorServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.collector.empty.Collector",
	HandlerType: ((*CollectorService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.collector.empty.Collector/Empty",
			Func: CollectorService_Empty_Handler,
		},
	},
}

// RegisterCollectorService registers service.
func RegisterCollectorService(s server.Service, svr CollectorService) {
	if err := s.Register(&CollectorServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Collector register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedCollector struct{}

func (s *UnimplementedCollector) Empty(ctx context.Context, req *EmptyReq) (*EmptyRsp, error) {
	return nil, errors.New("rpc Empty of service Collector is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// CollectorClientProxy defines service client proxy
type CollectorClientProxy interface {
	Empty(ctx context.Context, req *EmptyReq, opts ...client.Option) (rsp *EmptyRsp, err error)
}

type CollectorClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCollectorClientProxy = func(opts ...client.Option) CollectorClientProxy {
	return &CollectorClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CollectorClientProxyImpl) Empty(ctx context.Context, req *EmptyReq, opts ...client.Option) (*EmptyRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.collector.empty.Collector/Empty")
	msg.WithCalleeServiceName(CollectorServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("collector")
	msg.WithCalleeServer("empty")
	msg.WithCalleeService("Collector")
	msg.WithCalleeMethod("Empty")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &EmptyRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
