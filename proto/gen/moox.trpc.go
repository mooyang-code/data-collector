// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: moox.proto

package proto

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// AuthAPIService defines service.
type AuthAPIService interface {
	// Register Register 用户注册
	Register(ctx context.Context, req *RegisterReq) (*RegisterRsp, error)
	// GetLoginSalt GetLoginSalt 获取登录盐值（第一步）
	GetLoginSalt(ctx context.Context, req *GetLoginSaltReq) (*GetLoginSaltRsp, error)
	// Login Login 用户名密码登录（第二步）
	Login(ctx context.Context, req *LoginReq) (*LoginRsp, error)
	// GetChangePasswordSalt GetChangePasswordSalt 获取密码修改盐值（第一步）
	GetChangePasswordSalt(ctx context.Context, req *GetChangePasswordSaltReq) (*GetChangePasswordSaltRsp, error)
	// ChangePassword ChangePassword 修改密码（第二步）
	ChangePassword(ctx context.Context, req *ChangePasswordReq) (*ChangePasswordRsp, error)
	// GetUserInfo GetUserInfo 获取用户信息
	GetUserInfo(ctx context.Context, req *GetUserInfoReq) (*GetUserInfoRsp, error)
	// UpdateUserInfo UpdateUserInfo 更新用户信息
	UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq) (*UpdateUserInfoRsp, error)
}

func AuthAPIService_Register_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &RegisterReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).Register(ctx, reqbody.(*RegisterReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_GetLoginSalt_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetLoginSaltReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).GetLoginSalt(ctx, reqbody.(*GetLoginSaltReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_Login_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &LoginReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).Login(ctx, reqbody.(*LoginReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_GetChangePasswordSalt_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetChangePasswordSaltReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).GetChangePasswordSalt(ctx, reqbody.(*GetChangePasswordSaltReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_ChangePassword_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &ChangePasswordReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).ChangePassword(ctx, reqbody.(*ChangePasswordReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_GetUserInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetUserInfoReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).GetUserInfo(ctx, reqbody.(*GetUserInfoReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AuthAPIService_UpdateUserInfo_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &UpdateUserInfoReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AuthAPIService).UpdateUserInfo(ctx, reqbody.(*UpdateUserInfoReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AuthAPIServer_ServiceDesc descriptor for server.RegisterService.
var AuthAPIServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moox.server.AuthAPI",
	HandlerType: ((*AuthAPIService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.moox.server.AuthAPI/Register",
			Func: AuthAPIService_Register_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/GetLoginSalt",
			Func: AuthAPIService_GetLoginSalt_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/Login",
			Func: AuthAPIService_Login_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/GetChangePasswordSalt",
			Func: AuthAPIService_GetChangePasswordSalt_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/ChangePassword",
			Func: AuthAPIService_ChangePassword_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/GetUserInfo",
			Func: AuthAPIService_GetUserInfo_Handler,
		},
		{
			Name: "/trpc.moox.server.AuthAPI/UpdateUserInfo",
			Func: AuthAPIService_UpdateUserInfo_Handler,
		},
	},
}

// RegisterAuthAPIService registers service.
func RegisterAuthAPIService(s server.Service, svr AuthAPIService) {
	if err := s.Register(&AuthAPIServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AuthAPI register error:%v", err))
	}
}

// CloudNodeAPIService defines service.
type CloudNodeAPIService interface {
	// Heartbeat Heartbeat 节点心跳上报
	Heartbeat(ctx context.Context, req *HeartbeatReq) (*HeartbeatRsp, error)
	// GetNodeStatus GetNodeStatus 获取节点状态
	GetNodeStatus(ctx context.Context, req *GetNodeStatusReq) (*GetNodeStatusRsp, error)
}

func CloudNodeAPIService_Heartbeat_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &HeartbeatReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CloudNodeAPIService).Heartbeat(ctx, reqbody.(*HeartbeatReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func CloudNodeAPIService_GetNodeStatus_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetNodeStatusReq{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(CloudNodeAPIService).GetNodeStatus(ctx, reqbody.(*GetNodeStatusReq))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// CloudNodeAPIServer_ServiceDesc descriptor for server.RegisterService.
var CloudNodeAPIServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moox.server.CloudNodeAPI",
	HandlerType: ((*CloudNodeAPIService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.moox.server.CloudNodeAPI/Heartbeat",
			Func: CloudNodeAPIService_Heartbeat_Handler,
		},
		{
			Name: "/trpc.moox.server.CloudNodeAPI/GetNodeStatus",
			Func: CloudNodeAPIService_GetNodeStatus_Handler,
		},
	},
}

// RegisterCloudNodeAPIService registers service.
func RegisterCloudNodeAPIService(s server.Service, svr CloudNodeAPIService) {
	if err := s.Register(&CloudNodeAPIServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("CloudNodeAPI register error:%v", err))
	}
}

// AdminAPIService defines service.
type AdminAPIService interface {
}

// AdminAPIServer_ServiceDesc descriptor for server.RegisterService.
var AdminAPIServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.moox.server.AdminAPI",
	HandlerType: ((*AdminAPIService)(nil)),
	Methods:     []server.Method{},
}

// RegisterAdminAPIService registers service.
func RegisterAdminAPIService(s server.Service, svr AdminAPIService) {
	if err := s.Register(&AdminAPIServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("AdminAPI register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAuthAPI struct{}

// Register Register 用户注册
func (s *UnimplementedAuthAPI) Register(ctx context.Context, req *RegisterReq) (*RegisterRsp, error) {
	return nil, errors.New("rpc Register of service AuthAPI is not implemented")
}

// GetLoginSalt GetLoginSalt 获取登录盐值（第一步）
func (s *UnimplementedAuthAPI) GetLoginSalt(ctx context.Context, req *GetLoginSaltReq) (*GetLoginSaltRsp, error) {
	return nil, errors.New("rpc GetLoginSalt of service AuthAPI is not implemented")
}

// Login Login 用户名密码登录（第二步）
func (s *UnimplementedAuthAPI) Login(ctx context.Context, req *LoginReq) (*LoginRsp, error) {
	return nil, errors.New("rpc Login of service AuthAPI is not implemented")
}

// GetChangePasswordSalt GetChangePasswordSalt 获取密码修改盐值（第一步）
func (s *UnimplementedAuthAPI) GetChangePasswordSalt(ctx context.Context, req *GetChangePasswordSaltReq) (*GetChangePasswordSaltRsp, error) {
	return nil, errors.New("rpc GetChangePasswordSalt of service AuthAPI is not implemented")
}

// ChangePassword ChangePassword 修改密码（第二步）
func (s *UnimplementedAuthAPI) ChangePassword(ctx context.Context, req *ChangePasswordReq) (*ChangePasswordRsp, error) {
	return nil, errors.New("rpc ChangePassword of service AuthAPI is not implemented")
}

// GetUserInfo GetUserInfo 获取用户信息
func (s *UnimplementedAuthAPI) GetUserInfo(ctx context.Context, req *GetUserInfoReq) (*GetUserInfoRsp, error) {
	return nil, errors.New("rpc GetUserInfo of service AuthAPI is not implemented")
}

// UpdateUserInfo UpdateUserInfo 更新用户信息
func (s *UnimplementedAuthAPI) UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq) (*UpdateUserInfoRsp, error) {
	return nil, errors.New("rpc UpdateUserInfo of service AuthAPI is not implemented")
}

type UnimplementedCloudNodeAPI struct{}

// Heartbeat Heartbeat 节点心跳上报
func (s *UnimplementedCloudNodeAPI) Heartbeat(ctx context.Context, req *HeartbeatReq) (*HeartbeatRsp, error) {
	return nil, errors.New("rpc Heartbeat of service CloudNodeAPI is not implemented")
}

// GetNodeStatus GetNodeStatus 获取节点状态
func (s *UnimplementedCloudNodeAPI) GetNodeStatus(ctx context.Context, req *GetNodeStatusReq) (*GetNodeStatusRsp, error) {
	return nil, errors.New("rpc GetNodeStatus of service CloudNodeAPI is not implemented")
}

type UnimplementedAdminAPI struct{}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AuthAPIClientProxy defines service client proxy
type AuthAPIClientProxy interface {
	// Register Register 用户注册
	Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (rsp *RegisterRsp, err error)
	// GetLoginSalt GetLoginSalt 获取登录盐值（第一步）
	GetLoginSalt(ctx context.Context, req *GetLoginSaltReq, opts ...client.Option) (rsp *GetLoginSaltRsp, err error)
	// Login Login 用户名密码登录（第二步）
	Login(ctx context.Context, req *LoginReq, opts ...client.Option) (rsp *LoginRsp, err error)
	// GetChangePasswordSalt GetChangePasswordSalt 获取密码修改盐值（第一步）
	GetChangePasswordSalt(ctx context.Context, req *GetChangePasswordSaltReq, opts ...client.Option) (rsp *GetChangePasswordSaltRsp, err error)
	// ChangePassword ChangePassword 修改密码（第二步）
	ChangePassword(ctx context.Context, req *ChangePasswordReq, opts ...client.Option) (rsp *ChangePasswordRsp, err error)
	// GetUserInfo GetUserInfo 获取用户信息
	GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...client.Option) (rsp *GetUserInfoRsp, err error)
	// UpdateUserInfo UpdateUserInfo 更新用户信息
	UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq, opts ...client.Option) (rsp *UpdateUserInfoRsp, err error)
}

type AuthAPIClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAuthAPIClientProxy = func(opts ...client.Option) AuthAPIClientProxy {
	return &AuthAPIClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AuthAPIClientProxyImpl) Register(ctx context.Context, req *RegisterReq, opts ...client.Option) (*RegisterRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/Register")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("Register")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &RegisterRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) GetLoginSalt(ctx context.Context, req *GetLoginSaltReq, opts ...client.Option) (*GetLoginSaltRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/GetLoginSalt")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("GetLoginSalt")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetLoginSaltRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) Login(ctx context.Context, req *LoginReq, opts ...client.Option) (*LoginRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/Login")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("Login")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &LoginRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) GetChangePasswordSalt(ctx context.Context, req *GetChangePasswordSaltReq, opts ...client.Option) (*GetChangePasswordSaltRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/GetChangePasswordSalt")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("GetChangePasswordSalt")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetChangePasswordSaltRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) ChangePassword(ctx context.Context, req *ChangePasswordReq, opts ...client.Option) (*ChangePasswordRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/ChangePassword")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("ChangePassword")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &ChangePasswordRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) GetUserInfo(ctx context.Context, req *GetUserInfoReq, opts ...client.Option) (*GetUserInfoRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/GetUserInfo")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("GetUserInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetUserInfoRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AuthAPIClientProxyImpl) UpdateUserInfo(ctx context.Context, req *UpdateUserInfoReq, opts ...client.Option) (*UpdateUserInfoRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.AuthAPI/UpdateUserInfo")
	msg.WithCalleeServiceName(AuthAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("AuthAPI")
	msg.WithCalleeMethod("UpdateUserInfo")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &UpdateUserInfoRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// CloudNodeAPIClientProxy defines service client proxy
type CloudNodeAPIClientProxy interface {
	// Heartbeat Heartbeat 节点心跳上报
	Heartbeat(ctx context.Context, req *HeartbeatReq, opts ...client.Option) (rsp *HeartbeatRsp, err error)
	// GetNodeStatus GetNodeStatus 获取节点状态
	GetNodeStatus(ctx context.Context, req *GetNodeStatusReq, opts ...client.Option) (rsp *GetNodeStatusRsp, err error)
}

type CloudNodeAPIClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewCloudNodeAPIClientProxy = func(opts ...client.Option) CloudNodeAPIClientProxy {
	return &CloudNodeAPIClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *CloudNodeAPIClientProxyImpl) Heartbeat(ctx context.Context, req *HeartbeatReq, opts ...client.Option) (*HeartbeatRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.CloudNodeAPI/Heartbeat")
	msg.WithCalleeServiceName(CloudNodeAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("CloudNodeAPI")
	msg.WithCalleeMethod("Heartbeat")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HeartbeatRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *CloudNodeAPIClientProxyImpl) GetNodeStatus(ctx context.Context, req *GetNodeStatusReq, opts ...client.Option) (*GetNodeStatusRsp, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.moox.server.CloudNodeAPI/GetNodeStatus")
	msg.WithCalleeServiceName(CloudNodeAPIServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("moox")
	msg.WithCalleeServer("server")
	msg.WithCalleeService("CloudNodeAPI")
	msg.WithCalleeMethod("GetNodeStatus")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetNodeStatusRsp{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// AdminAPIClientProxy defines service client proxy
type AdminAPIClientProxy interface {
}

type AdminAPIClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAdminAPIClientProxy = func(opts ...client.Option) AdminAPIClientProxy {
	return &AdminAPIClientProxyImpl{client: client.DefaultClient, opts: opts}
}

// END ======================================= Client Service Definition ======================================= END
